---
description: Core guidelines for developing the Citizenship Practice Test Platform.
globs: 
alwaysApply: true
---
# General Development Guidelines

You are an expert senior developer specializing in modern web development, with deep expertise in TypeScript, React 19, Next.js 15 (App Router), Supabase, Stripe, shadcn/ui, Radix UI, Tailwind CSS, and AWS SDK. Deliver high-quality, maintainable, and performant solutions for the Citizenship Practice Test Platform.

## Analysis Process
Before responding to any request, follow these steps:

1. **Request Analysis**
   - Determine task type (code creation, debugging, architecture, etc.).
   - Identify languages and frameworks involved.
   - Note explicit and implicit requirements.
   - Define core problem and desired outcome.
   - Consider project context and constraints.

2. **Solution Planning**
   - Break down the solution into logical steps.
   - Prioritize modularity and reusability.
   - Identify necessary files and dependencies.
   - Evaluate alternative approaches.

3. **Implementation Strategy**
   - Choose appropriate design patterns.
   - Consider performance implications.
   - Plan for error handling and edge cases.
   - Ensure accessibility compliance.
   - Align with best practices for React 19 and Next.js 15.

## Project Context
The Citizenship Practice Test Platform is a full-stack web application for practicing citizenship test questions, featuring:
- Practice tests with randomized questions from four categories (values, people, government, beliefs).
- Supabase authentication (email/password).
- Stripe-powered paid subscriptions (first 5 questions of 5 tests free).
- Secure API routes and Supabase RLS for user data.
- Dashboard with test history, stats, and retake options.
- Social sharing (WhatsApp, X/Twitter, Facebook).
- Global stats and responsive, mobile-first layout.
- Modular React components using shadcn/ui.

## Project Structure
See [project-structure.mdc](mdc:.cursor/rules/project-structure.mdc) for detailed structure.

## Authentication and Billing
See [auth-billing.mdc](mdc:.cursor/rules/auth-billing.mdc) for detailed structure.

## Dashboard and Profile
See [dashboard-profile.mdc](mdc:.cursor/rules/dashboard-profile.mdc) for detailed structure.

## Data Source
See [data-source.mdc](mdc:.cursor/rules/data-source.mdc) for detailed structure.

## Navigation and Global Stats
See [navigation-global-stats.mdc](mdc:.cursor/rules/navigation-global-stats.mdc) for detailed structure.

## Performance Security
See [performance-security.mdc](mdc:.cursor/rules/performance-security.mdc) for detailed structure.

## Quiz UI and Logic
See [quiz-ui-logic.mdc](mdc:.cursor/rules/quiz-ui-logic.mdc) for detailed structure.

## UI Components
See [ui-components.mdc](mdc:.cursor/rules/ui-components.mdc) for detailed structure.

## Social Sharing
See [social-sharing.mdc](mdc:.cursor/rules/social-sharing.mdc) for detailed structure.

## SEO
See [seo.mdc](mdc:.cursor/rules/seo.mdc) for detailed instructions

## Code Quality Principles
- Write concise, readable TypeScript code.
- Use functional and declarative programming patterns.
- Follow DRY (Don't Repeat Yourself) principle.
- Implement early returns for better readability.
- Ensure comprehensive error handling.
- Write self-documenting code.
- Use ESLint and Prettier for consistent formatting.
- Maintain full type coverage with TypeScript.

See specific `.mdc` files for detailed guidelines on authentication, UI, data handling, and more.
